cmake_minimum_required(VERSION 2.8)
project(RayTrace)
find_package(OpenCV REQUIRED)
find_package(OpenMP REQUIRED)
find_package(MPI REQUIRED)
find_package(CUDA REQUIRED)
message(STATUS "C++ compiler status:")
message(STATUS "    path: ${CMAKE_CXX_COMPILER}")
message(STATUS "MPI C++ compiler status:")
message(STATUS "    path: ${MPI_CXX_COMPILER}")
message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")
message(STATUS "MPI library status:")
message(STATUS "    libraries: ${MPI_CXX_LIBRARIES}")
message(STATUS "    include path: ${MPI_CXX_INCLUDE_PATH}")
message(STATUS "CUDA library status:")
message(STATUS "    version: ${CUDA_VERSION}")
message(STATUS "    libraries: ${CUDA_LIBRARIES}")
message(STATUS "    include path: ${CUDA_INCLUDE_DIRS}")
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${MPI_CXX_INCLUDE_PATH})
include_directories(${CUDA_INCLUDE_DIRS})
cuda_include_directories(${OpenCV_INCLUDE_DIRS})
cuda_include_directories(${MPI_CXX_INCLUDE_PATH})
cuda_include_directories(${CUDA_INCLUDE_DIRS})
#set(CMAKE_CXX_FLAGS "-g")
#set(CUDA_NVCC_FLAGS "-g -arch=sm_37 --std=c++11 -ccbin g++")
set(CMAKE_CXX_FLAGS "-g -Ofast ${OpenMP_CXX_FLAGS}")
set(CUDA_NVCC_FLAGS "-g -O3 -arch=sm_37 --std=c++11 -ccbin ${CMAKE_CXX_COMPILER} --use_fast_math")
cuda_compile(CUDA_TARGETS device_query.cu cuda.cu)
add_executable(RayTrace ${CUDA_TARGETS} opencvlib.cpp raytrace.cpp point.cpp polygon.cpp object.cpp kdtree.cpp sphere.cpp matrix.cpp)
target_link_libraries(RayTrace ${OpenCV_LIBS} ${MPI_CXX_LIBRARIES} ${CUDA_LIBRARIES})

